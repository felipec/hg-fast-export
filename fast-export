#!/usr/bin/env python
#
# Copyright (c) 2012-2023 Felipe Contreras
#

# Inspired by Rocco Rutte's hg-fast-export

import sys
import os
import re

import mercurial.hg
import mercurial.ui

author_re = re.compile(r'^[^<>]* <[^<>]+>$')

def wr(arg):
    os.write(1, arg.encode() + b'\n')

def wr_data(data):
    os.write(1, b'data %d\n' % len(data))
    os.write(1, data)

def gittz(tz):
    tz /= 60.0
    return '%+03d%02d' % (tz / -60, tz % 60)

def gitmode(filectx):
    flags = filectx.flags()
    return b'l' in flags and '120000' or b'x' in flags and '100755' or '100644'

class Marks:

    def __init__(self):
        self.marks = {}

    def get_mark(self, ctx):
        mark = len(self.marks) + 1
        self.marks[ctx.hex()] = mark
        return mark

    def from_rev(self, ctx):
        return self.marks[ctx.hex()]

def convert_to_git_user(user):
    user = user.decode()
    if author_re.match(user):
        return user
    else:
        return 'Unknown <unknown>'

def get_filechanges(repo, ctx, parents, files):
    if not parents:
        return files, []
    else:
        stat = parents[0].status(ctx)
        return frozenset(stat.modified + stat.added), frozenset(stat.removed)

def export_commit(ref, rev):
    ctx = repo[rev]

    _, user, (time, tz), files, desc, extra = repo.changelog.read(ctx.node())
    author = '%s %d %s' % (convert_to_git_user(user), time, gittz(tz))

    parents = [p for p in ctx.parents() if p.rev() != -1]
    modified, removed = get_filechanges(repo, ctx, parents, files)

    if not parents:
        wr('reset %s' % ref)

    wr('commit %s' % ref)
    wr('mark :%d' % marks.get_mark(ctx))
    wr('committer %s' % author)
    wr_data(desc + b'\n')

    if parents:
        wr('from :%d' % marks.from_rev(parents[0]))
        if len(parents) > 1:
            wr('merge :%d' % marks.from_rev(parents[1]))

    for fname in removed:
        wr('D %s' % fname.decode())
    for fname in modified:
        filectx = ctx.filectx(fname)
        wr('M %s inline %s' % (gitmode(filectx), filectx.path().decode()))
        wr_data(filectx.data())
    wr('')

def export_ref(ref, head):
    revs = repo.changelog.findmissingrevs(heads={head.rev()})
    for rev in revs:
        export_commit(ref, rev)

    wr('reset %s' % ref)
    wr('from :%u' % marks.from_rev(head))
    wr('')

def main(args):
    global repo, marks

    marks = Marks()

    url = args[1]
    repo = mercurial.hg.repository(mercurial.ui.ui.load(), url.encode())

    node = repo.branchtip(b'default')
    export_ref('refs/heads/master', repo[node])


sys.exit(main(sys.argv))
